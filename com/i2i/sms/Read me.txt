javac -cp ".;lib/*" com/i2i/sms/utils/*.java com/i2i/sms/exception/*.java com/i2i/sms/models/*.java com/i2i/sms/helper/*.java com/i2i/sms/dao/*.java com/i2i/sms/service/*.java com/i2i/sms/common/*.java com/i2i/sms/controller/*.java

javac -cp ".;lib/*" Main.java

java -cp ".;lib/*" Main


/*<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-configuration PUBLICjavac -cp ".;lib/*" Main.java
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-mapping>
<class name = "Student" table = "student">
    <id name = "id" type = "int" not-null = "true">
        <column name = "student_id"/>
        <generator class = "native"/>
    </id>
    <property name = "name" not-null = "true">
        <column name = "student_name"/>
    </property>
    <property name = "dob" not-null = "true">
        <column name = "student_dob"/>
    </property>
    <many-to-one name = "grade" class = "model.Grade" not-null = "true">
        <column name = "grade_id"/>
    </many-to-one>
    <one-to-one name = "address" class = "model.Address" not-null = "true"/>
    <list name="roles" table="student_roles" inverse="true" lazy="true" fetch="select">
        <key column="student_id"/>
        <index column="role_index"/>
        <many-to-many column="role_id" class="model.Role"/>
    </list>
</class>
</hibernate-mapping>*/



    /**
     * <p>
     * Fetches all student data from the database.
     * </p>
     * @return A list of Student objects containing the fetched students, or null if no data is retrieved.
     * @throws StudentManagementException 
     *         if there's an issue accessing or fetching data from the database.
     */
    public List<Student> fetchAllStudents() throws StudentManagementException {
        return studentDao.fetchAllStudents(); 
    }


    
    /**
     * <p>
     * Deletes a student record from the database based on the provided student Id.
     * </p>
     * @param deleteId
     *            The Id of the student record to be deleted.
     * @return The Id of the deleted student record if successful, or 0 if no record was deleted.
     * @throws StudentManagementException 
     * if a database access error occurs while deletes a record.
     */
    public void deleteStudentById(int studentId) throws StudentManagementException {
        studentDao.deleteStudentById(studentId);
    }

    /**
     * <p>
     * Fetches a list of Student objects along with their corresponding Grade objects from the database.
     * </p>
     * @return A list of Student objects with associated Grade objects, or null if an error occurs.
     * @throws StudentManagementException 
     * if a database access error occurs while retrieving all students form the table.
     */
    public List<Student> getAllStudents() throws StudentManagementException {
        return studentDao.getAllStudents();
    } 

}




address add


    public void addAddress(Address address) throws StudentManagementException {
        Session session = null;
        Transaction transaction = null;
        try {
            session = HibernateManagement.getSessionFactory().openSession();
            transaction = session.beginTransaction();
            session.save(address);
            transaction.commit();
        }
        catch (Exception e) {
            if (null != transaction) {
                transaction.rollback();
            }
            throw new StudentManagementException("Error occured while inserting address", e);
        } finally {
            if (null != session) {
                session.close();
            }
        }
    }


    /**
     * <p>
     * Assigning role to student.
     * </p>
     * @param StudentId
     *           Id of the student. 
     * @param RoleId
     *          Id of the role picked by the student. 
     * @throws StudentManagementException
     * if a database access error occurs while assigning the role to student.
     */    
    public void assignRoleToStudent(int studentId, int roleId) throws StudentManagementException{
        roleDao.assignRoleToStudent(studentId, roleId);
    }


import java.util.regex.Pattern;

/**
 * Checks if a given string consists only of alphabetic characters (either lowercase or uppercase).
 *
 * @param str The string to be checked.
 * @return true if the string consists only of alphabetic characters, false otherwise.
 */
public static boolean isValidString(String str) {
    // Regular expression to match only alphabetic characters (either lowercase or uppercase)
    String regex = "^[a-zA-Z]+$";
    
    // Compile the regex pattern for efficiency
    Pattern pattern = Pattern.compile(regex);
    
    // Use Matcher to check if the entire string matches the pattern
    return pattern.matcher(str).matches();
}
